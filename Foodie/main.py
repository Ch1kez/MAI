from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from Parse_Rests import get_rests_info
import markup

bot = Bot('5886258157:AAHp1JqgOLM2Opam5vJHztVHd1GrlgDgGFE')
dp = Dispatcher(bot, storage=MemoryStorage())


class UserState(StatesGroup):
    void = State()
    begin = State()
    metro = State()
    kitchen = State()
    price = State()
    smile = State()
    end = State()


# -----------------------------------------------------------------------------------------------------------------------
@dp.message_handler(lambda message: message, state=UserState.begin)
async def start_invalid(message: types.Message):
    if await menu(message.text):
        return await metro(message)
    else:
        return await start(message)


@dp.message_handler(lambda message: message, state=UserState.metro)
async def metro_invalid(message: types.Message, state: FSMContext):
    if message.text not in ["–ê—Ä–±–∞—Ç—Å–∫–∞—è", "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è", "–¢–≤–µ—Ä—Å–∫–∞—è"]:
        if await menu(message.text):
            await UserState.begin.set()
            return await metro(message)
        else:
            await UserState.begin.set()
            return await metro(message)
    else:
        if message.text == "–ê—Ä–±–∞—Ç—Å–∫–∞—è":
            await state.update_data(chosen_metro=1)
        elif message.text == "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è":
            await state.update_data(chosen_metro=2)
        elif message.text == "–¢–≤–µ—Ä—Å–∫–∞—è":
            await state.update_data(chosen_metro=3)
        user_sub = await state.get_data()
        print(user_sub)
        await UserState.metro.set()
        return await kitchen(message)


@dp.message_handler(lambda message: message, state=UserState.kitchen)
async def kitchen_invalid(message: types.Message, state: FSMContext):
    if message.text not in ["–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–Ø–ø–æ–Ω—Å–∫–∞—è", "–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è"]:
        if await menu(message.text):
            await UserState.begin.set()
            return await metro(message)
        else:
            return await kitchen(message)
    else:
        if message.text == "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è":
            await state.update_data(chosen_kitchen=1)
        elif message.text == "–Ø–ø–æ–Ω—Å–∫–∞—è":
            await state.update_data(chosen_kitchen=2)
        elif message.text == "–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è":
            await state.update_data(chosen_kitchen=3)
        await UserState.metro.set()
        user_kit = await state.get_data()
        print(user_kit)
        await UserState.kitchen.set()
        return await price(message)


@dp.message_handler(lambda message: message, state=UserState.price)
async def price_invalid(message: types.Message, state: FSMContext):
    if message.text not in ["–º–µ–Ω–µ–µ 1500", "1500 - 2000", "2000 - 3000"]:
        if await menu(message.text):
            await UserState.begin.set()
            return await metro(message)
        else:
            await UserState.kitchen.set()
            return await price(message)
    else:
        if message.text == "–º–µ–Ω–µ–µ 1500":
            await state.update_data(chosen_price=1)
        elif message.text == "1500 - 2000":
            await state.update_data(chosen_price=2)
        elif message.text == "2000 - 3000":
            await state.update_data(chosen_price=3)
        await UserState.price.set()

        user_kit = await state.get_data()
        arr = get_rests_info(user_kit["chosen_metro"], user_kit["chosen_kitchen"], user_kit["chosen_price"])
        print(arr)
        for el in arr:
            await message.answer(el, parse_mode=types.ParseMode.MARKDOWN_V2, disable_web_page_preview=False)

        return await smile(message)


@dp.message_handler(lambda message: message, state=UserState.smile)
async def smile_invalid(message: types.Message):
    if message.text not in ["üëçüèª", "üëéüèª"]:
        if await menu(message.text):
            await UserState.begin.set()
            return await metro(message)
        else:
            await UserState.price.set()
            return await smile(message)
    else:
        if message.text == "üëçüèª":
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–≤–µ—Ç! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –±–æ—Ç–∞ –∏ –º—ã '
                                 '—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –µ—â–µ —Ö–æ—Ç—å —á—É—Ç–æ—á–∫—É —É–º–Ω–µ–µ!')
        else:
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–≤–µ—Ç! –ú—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º '
                                 '–Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –ø–æ–∫–æ—Ä–∏–ª –∏ –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ.')

        await UserState.price.set()
        return await yes_or_no(message)


@dp.message_handler(lambda message: message, state=UserState.end)
async def yes_or_no_invalid(message: types.Message):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        if await menu(message.text):
            await UserState.begin.set()
            return await metro(message)
        else:
            await UserState.price.set()
            return await yes_or_no(message)
    else:
        if message.text == '–î–∞':
            await UserState.begin.set()
            return await metro(message)
        else:
            await UserState.void.set()
            return await message.answer('–ï—Å–ª–∏ –≤–Ω–æ–≤—å –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞, '
                                        '–Ω–∞–∂–º–∏—Ç–µ /change_filter.\n–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!')


@dp.message_handler(lambda message: message, state=UserState.void)
async def void_invalid(message: types.Message):
    if await menu(message.text):
        await UserState.begin.set()
        return await metro(message)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ '/change_filter'
async def menu(msg_txt):
    if msg_txt == '/change_filter':
        return True
    else:
        return False


###################################      –°–¢–ê–†–¢
async def start(msg):
    await UserState.begin.set()
    await msg.answer('–ù–∞–∂–º–∏—Ç–µ /change_filter –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è!')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ start
@dp.message_handler(commands='start')
async def start_handler(message: types.Message):
    await start(message)


###################################

###################################      –ú–ï–¢–†–û
async def metro(msg):
    await UserState.metro.set()
    await msg.answer('–†—è–¥–æ–º —Å –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–µ–π '
                     '–º–µ—Ç—Ä–æ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–∫—É—à–∞—Ç—å?',
                     reply_markup=markup.metro_buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è '–º–µ—Ç—Ä–æ'
@dp.message_handler(state=UserState.begin)
async def metro_handler(message: types.Message):
    await metro(message)


###################################

###################################      –ö–£–•–ù–Ø
async def kitchen(msg):
    await UserState.kitchen.set()
    await msg.answer('–ö–∞–∫–∞—è –∫—É—Ö–Ω—è –í–∞–º —Å–µ–≥–æ–¥–Ω—è –ø–æ –¥—É—à–µ?',
                     reply_markup=markup.kitchen_buttons)


###################################      –°–†–ï–î–ù–ò–ô –ß–ï–ö
async def price(msg):
    await UserState.price.set()
    await msg.answer('–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å –∫–∞–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
                     reply_markup=markup.price_buttons)


###################################      –°–ú–ê–ô–õ
async def smile(msg):
    await UserState.smile.set()
    await msg.answer('–•–æ—Ç–µ–ª–∏ –±—ã –í—ã, —á—Ç–æ–±—ã –Ω–∞—à —Ä–æ–±–æ—Ç —Ä–∞—Å—à–∏—Ä–∏–ª –≥–µ–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–π '
                     '—Ä–∞–±–æ—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏–ª –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–∞?',
                     reply_markup=markup.smile_buttons)


###################################      –ö–û–ù–ï–¶
async def yes_or_no(msg):
    await UserState.end.set()
    await msg.answer('–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ?',
                     reply_markup=markup.yes_or_no_buttons)


if __name__ == '__main__':
    executor.start_polling(dp)
